[{"title":"数据库总结","date":"2019-07-28T23:40:46.356Z","path":"2019/07/29/数据库总结/","text":"JAVA连接Mysql数据库的发展JDBC使用步骤 注册驱动 1Class.forName(\"com.mysql.jdbc.Driver\"); 获取连接 1Connection conn = DriverManger.getConnection(\"jdbc:mysql://主机:端口/数据库\",\"数据库用户名\",\"数据库密码\"); 获取Statement对象 1Statement stmt = conn.createStatement(); 使用Statement对象执行sql语句 增删改： 12int i = stmt.executeUpdate(\"sql语句\")；i为执行这条sql语句改变的行数 查： 1ResultSet rs = stmt.executeQuery(\"sql语句\")； 释放资源:在java中,释放资源时或者关闭流时,按照先创建后关闭的原则 增删改: 12stmt.close();conn.close(); 查 123rs.close();stmt.close();conn.close(); JDBC的缺点 操作数据库都需要创建连接,操作完成还需要关闭连接 创建连接和关闭连接可能比执行sql需要的时间都长 一个网站需要高频繁访问时数据库,如果短时间频繁的访问数据库服务器,就容易造成服务器的宕机 连接池为什么要使用连接池？ 优点:连接池中保存了一些数据库连接,这些连接时可以重复的.解省了数据库资源的消耗。 c3p0使用步骤 导包 编写连接池配置文件c3p0-config.xml,配置对应的参数 创建连接池对象 1ComPooledDataSource cpds = new ComPooledDataSource(); 从连接池中获取对象 1conn = cpds.getConnection(); 获取发送sql语句的对象 1stmt = cpds.prepareStatement(sql)； 操作数据库 1stmt.executeUpdate; stmt.executeQuery; 释放资源 Druid使用步骤 导包 创建properties文件,设置对应参数 1234url=jdbc:mysql://主机:端口/数据库名username=用户名password=密码driverClassName=com.mysql.jdbc.Driver 加载properties文件到Properties对象中 12Properties info = new Properties();info.load(new fileInputStream(\"配置文件名.properties\"))； 创建连接池,使用配置文件中的参数 1DataSource dataSource = DruidDataSourceFactory.createDataSource(info); 从连接池中获取连接 1conn = dataSource.getConnection(); 获取发送sql语句对象 1pstmt = conn.prepareStatement(\"sql语句\"); 操作数据库 1pstmt.executeQuery();pstmt.executeUpdate(); 释放资源 JdbcTemplate优点: 将查询到的数据直接封装成对象 无需手动释放资源 步骤 创建JdbcTemplate类的对象 1JdbcTemplate jdbcTemplate = new JdbcTemplate(连接池) 编写sql语句 执行sql语句 增删改 1int row = jdbcTemplate.update(\"sql语句\",占位符); 查 单表 单个对象 基本数据类型 1jdbcTemplate.queryForObject(\"sql语句\",包装类型.class,占位符) pojo对象 1jdbcTemplate.queryForObject(\"sql语句\",new BeanPropertyRowMapper&lt;&gt;(pojo对象.class),占位符) 多个对象 1jdbc.query(\"sql语句\",new BeanPropertyRowMapper&lt;&gt;(pojo对象.class),占位符) 多表 单条数据 12返回值大多为Map&lt;String,Object&gt;jdbcTemplate.queryForMap(“sql语句”, 占位符); 多条数据 12返回值为List&lt;Map&lt;String,Object&gt;&gt;jdbcTemplate.queryForList(“sql语句”, 占位符); Mybatis优点： 支持自定义sql,存储过程,高级映射 实现自动对sql参数的设置 自动对结果集进行解析和封装 通过对xml或注解进行配置和映射,大大减少了代码量 数据源的连接信息通过配置文件进行配置 整体架构 配置文件 全局配置文件:mybatis-config.xml 作用:配置数据源(配置数据库连接信息) 映射文件:XxxMapper.xml 作用:配置sql语句、参数、结果集、数据类型 SqlSessionFactory 作用:获取SqlSession 123InputStream inputStream = Resources.getResourceAsStream(\"mybatis-config.xml\");SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);SqlSession sqlSession = sqlSessionFactory.openSession(); SqlSession 作用:执行CRUD操作,线程不安全 Executor 执行器 :sqlSession通过调用它来完成具体的CRUD 查 查一个对象 1sqlsession.selectone(XxxMapper.id,占位符) 查一列对象 1sqlsession.selectList(XxxMapper.id,占位符) 增 1sqlsession.insert(XxxMapper.id,占位符) 删 1sqlsession.delete(XxxMapper.id,占位符) 改 1sqlsession.update(XxxMapper.id,占位符) 完整的CRUD操作 配置文件 全局配置文件:mybatis-config.xml 作用:配置数据源(配置数据库连接信息) 映射文件:XxxMapper.xml 作用:配置sql语句、参数、结果集、数据类型 创建接口和实现类 SqlSessionFactory 作用:获取SqlSession 123InputStream inputStream = Resources.getResourceAsStream(\"mybatis-config.xml\");SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);SqlSession sqlSession = sqlSessionFactory.openSession(true); SqlSession 作用:执行CRUD操作,线程不安全 Executor 执行器 :sqlSession通过调用它来完成具体的CRUD 查 查一个对象 1sqlsession.selectone(XxxMapper.id,占位符) 查一列对象 1sqlsession.selectList(XxxMapper.id,占位符) 增 1sqlsession.insert(XxxMapper.id,占位符) 删 1sqlsession.delete(XxxMapper.id,占位符) 改 1sqlsession.update(XxxMapper.id,占位符) Mapper动态代理方式只写接口，不书写实现类，只编写Mapper.xml即可 Mapper接口的动态代理实现，需要遵循以下规范： 映射文件中的命名空间（名称空间）与Mapper接口的全路径一致 映射文件中的statement的Id与Mapper接口的方法名保持一致 映射文件中的statement的ResultType必须和mapper接口方法的返回类型一致（即使不采用动态代理，也要一致） 映射文件中的statement的parameterType必须和mapper接口方法的参数类型一致（不一定，该参数可省略） 操作步骤 配置文件 全局配置文件:mybatis-config.xml 作用:配置数据源(配置数据库连接信息) 映射文件:XxxMapper.xml 作用:配置sql语句、参数、结果集、数据类型 创建接口 生成一个代理的实现类 1234InputStream inputStream = Resources.getResourceAsStream(\"mybatis-config.xml\");SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);SqlSession sqlSession = sqlSessionFactory.openSession(true);XxxMapper = sqlSession.getMapper(XxxMapper.class); 执行语句 Xxxmapper.接口方法名(参数);","categories":[],"tags":[]},{"title":"'我的第一篇博客'","date":"2019-06-30T03:50:50.000Z","path":"2019/06/30/我的第一篇博客/","text":"我的第一篇博客https://mumuyouqian.github.io","categories":[],"tags":[]},{"title":"Hello World","date":"2019-06-30T00:53:18.526Z","path":"2019/06/30/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]